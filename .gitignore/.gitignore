#include <iostream>
using namespace std;
#Create a simple class in your C++ application called Person.
class Person
{
	#Give Person member variables for name, age, height, and weight.
	public:
		string name;
		int age;
		int height;
		int weight;
};
#Create a function in your application called ModifyPerson() that accepts a Person object as an argument. 
# NOTE: This function should be in the application area and not inside the Person class.
void modifyperson(Person &p1);
#Create a function called PassByValue that accepts an integer argument.
void passbyvalue(int); 
#Create a function called PassByRef that accepts a reference variable as an argument.
void passbyref(int &);

int main()
{
	#Assign the value 3 to num1.
	int num1=3; 
	#Assign the value 5 to the memory location stored in pNum.  (Hint, there is a special operator used for this)
	int *pnum=new int; 
	cout<<"inside the main funtion:"<<endl; 
	cout<<"the value of num1 is:"<<num1<<endl;
	cout<<"the value of pnum is :"<<*pnum<<endl;
	#Call PassByValue and pass in num1 as the argument.
	passbyvalue(num1); 
	#After the call returns to main(), output the value of num1 to the console window again.
	cout<<"Backpnum to the main:"<<endl;
	cout<<"the value of num1 is:"<<num1<<endl;
	#Call PassByRef and send pNum as the argument.
	passbyref(*pnum);
	#After the call returns to main(), output the value of pNum to the console.
	cout<<"Back to the main:"<<endl;
	cout<<"the value of  is:"<<*pnum<<endl;
	#Create a pointer variable to a double, and allocate memory for it using the new keyword.
	double *pdouble=new double;
	#Assign a value to the memory location.
	*pdouble=10;
	#Use the dereference operator, get the value and output it to the console.
	cout<<"the value of variable stored in double:"<<*pdouble<<endl;
	#Deallocate the memory for that variable.
	delete pdouble;
	#Output the value stored in the memory location for that variable again.
	cout<<"the value of variable stored in double after deleting:"<<*pdouble<<endl;
	#Instantiate a Person object in your main() method and assign values to the member variables.
	Person p1{"renu",20,147,55};
	#Output the values stored in the member variables to the console window
	cout<<"the person1 name is :"<<p1.name<<endl;
	cout<<"the person1 age is :"<<p1.age<<endl;
	cout<<"the person1 height is :"<<p1.height<<endl;
	cout<<"th person1 weight is :"<<p1.weight<<endl;
	#Call the ModifyPerson() function, passing in your Person object you just created.
	modifyperson(p1);
	#Back in main(), output the values stored in the Person object you created.  
	#Did the name change?  It should have if you passed the object correctly to the function.
	cout<<"the updated information after modification is "<<endl;
	cout<<"name:"<<p1.name<<endl;
	cout<<"age:"<<p1.age<<endl;
	cout<<"hi8"<<p1.height<<endl;
	cout<<"wi8"<<p1.weight<<endl;
	return(0);
}
void passbyvalue(int x)
{
	#Modify the value of num1 inside the PassByValue function and output the new value to the console window.
	x++; 
	#Inside PassByValue, output a text string indicating the name of the function you are in.
	cout<<"Inside the passbyvalue()"<<endl; 
	cout<<"the value of num1 is:"<<x<<endl;
}
void passbyref(int &y)
{
	#Output a statement indicating the current function name.
	cout<<"inside the passbyref()"<<endl;
	#Modify the value of pNum, setting it to 50,  and output the value to the console.
	y=50;
	cout<<"the value of pnum is "<<y<<endl;
}
void modifyperson(Person& p1)
{
	#Call the ModifyPerson() function, passing in your Person object you just created.
	cout<<"modify the name"<<endl;
	cin>>p1.name;
}
	
